## Exercises
```julia
cd(@__DIR__)
using Pkg; Pkg.activate(".")
```

### DataFrames and Plotting with the Iris dataset

Download the "iris.csv" file from [here](https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv). Save it in a file `iris_data.csv`
```julia
using Downloads

iris_data_filename = "iris_data.csv"
Downloads.download("https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv", iris_data_filename)
```

Load the data from the file into a `DataFrame` called `iris_df`.
```julia
using CSV, DataFrames
iris_df = CSV.read(iris_data_filename, DataFrame)
```

Print the entire DataFrame. 

```julia
println(iris_df)
```
Print only the "species" column of the DataFrame. 
```julia
println(iris_df[:,[:species]])
```

Print the first 5 rows in the DataFrame.
```julia
println(first(iris_df, 5))
```

Print only the rows of the `DataFrame` where the "petal_length" is greater than 5. 

```julia
println(iris_df[iris_df.petal_length .> 5., :])
```

Create a new `DataFrame`, which contains the mean and standard deviation of sepal length for each species

```julia
using Statistics
df_g = groupby(iris_df, :species)
df_stats = combine(df_g, :sepal_length => mean, :sepal_length => std)
println(df_stats)
```

Save the DataFrame to a new CSV file called "new_iris.csv".

```julia
CSV.write("new_iris.csv", df_stats)
```

Provide statistics for the species `setosa`. You should create a new `DataFrame` called `iris_df_setosa` and use the `describe` function.
```julia
iris_df_setosa = iris_df[iris_df.species .== "setosa", :]
describe(iris_df_setosa)
```

Create a scatter plot of the `sepal_length` column on the x-axis and the `sepal_width` column on the y-axis. Each species should have a different color.
```julia
using PythonPlot
fig, ax = subplots(1)
cols = ["tab:blue", "tab:green", "tab:red"]
for (i, df) in enumerate(df_g)
    ax.scatter(df.sepal_length, df.sepal_width, c = cols[i], label=df.species[1])
end
display(fig)
```

Add a title to the plot and label the x and y axes. Then, Save the plot to a pdf file using the `savefig()` function.
```julia
ax.legend()
ax.set_xlabel("sepal_length")
ax.set_ylabel("sepal_width")
ax.set_title("Iris traits")
fig.savefig("iris.pdf", dpi=100)
```

### Analyzing GBIF dataset using DataFrames, broadcasting, and data visualization

First, let's load GBIF data. Use [GBIF2](https://github.com/rafaqz/GBIF2.jl).
```julia
using GBIF2, DataFrames

species_name = "Milvus milvus"
df = occurrence_search(; limit=4000, country=:CH, year=(2000,2020)) |> DataFrame
```

What are the columns of this dataframe? How many rows does it have?

```julia
println(names(df))
println("Its size is ", size(df,1))
```

Group occurrences by canton (`stateProvince`). Print all cantons where the birds were observed.
```julia
dfg = groupby(df, "stateProvince")
cantons = [df.stateProvince[1] for df in dfg]
```

Which canton has the most number of occurrence?


```julia

noccurences = [size(df,1) for df in dfg]

canton_max_oc = cantons[argmax(noccurences)]
println(canton_max_oc, " is the canton where ", species_name, "has been the most observed")
```


Create a bar chart with `Plots.jl`, that shows the total number of observations for each canton

```julia
using Plots

# Create a bar chart that shows the total number of observations for each country and decade
bar( noccurences, xlabel = "Canton", ylabel = "Number of observations", title = "GBIF dataset", legend = :top, xrotation = 45, xticks=(1:length(cantons), cantons))

```


Drop the rows where the `decimalLongitude` or `decimalLatitude` is `missing`

```julia
dropmissing!(df, [:decimalLongitude, :decimalLatitude])

```

Normalize the `decimalLongitude` and `decimalLatitude`, so that it scales between 0 and 1.
For this, construct a function `normalize`, that takes in a vector of floating points and a new normalized vector. This function should use the `.` operator.

```julia
function normalize(x::AbstractVector)
    maxx = maximum(x)
    minx = minimum(x)
    return (x .- minx) ./(maxx - minx)
end
```

```julia
for col in [:decimalLongitude, :decimalLatitude]
    df[!, col] .= normalize(df[:, col])
end

df[:,[:decimalLongitude, :decimalLatitude]]
```

> ğŸ¥³ Congrats! You are done with this session of exercises.